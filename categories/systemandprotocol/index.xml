<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>systemAndProtocol on Zput's blog</title><link>http://zput.github.io/categories/systemandprotocol/</link><description>Recent content in systemAndProtocol on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 19 Jan 2023 19:00:00 +0000</lastBuildDate><atom:link href="http://zput.github.io/categories/systemandprotocol/index.xml" rel="self" type="application/rss+xml"/><item><title>面向对象比较</title><link>http://zput.github.io/post/_posts/object_oriented/</link><pubDate>Thu, 19 Jan 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/object_oriented/</guid><description>其他 static static 除了可以声明静态成员变量，还可以声明静态成员函数 静态成员函数与普通成员函数的根本区别在于：普通成员函数有 this 指针，可以访问类中的任意成</description></item><item><title>调用关系</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</link><pubDate>Tue, 13 Dec 2022 20:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</guid><description>单位 以函数为单位:《请求与响应》 请求与响应参数的判断 默认响应里面如果错误为nil,那么它的实际值的字段不能是nil吧，最好是初始化为对应的空</description></item><item><title>进程间通讯</title><link>http://zput.github.io/post/_posts/process_communication/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/process_communication/</guid><description>including IPC的方式通常有 管道（包括无名管道和命名管道）:PIPE 信号量: 消息队列: 信号量 共享存储: mmap() shm Socket &amp;mdash; Streams: ##including 管道中的无名管道是存放在文件描述符</description></item><item><title>谈谈线程</title><link>http://zput.github.io/post/_posts/thread/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/thread/</guid><description>线程模型的实现，可以分为以下几种方式： Go语言的线程模型就是一种特殊的两级线程模型。暂且叫它“MPG”模型吧。 抛弃P(Processor) 均</description></item><item><title>程序需要考虑的资源消耗问题</title><link>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</link><pubDate>Sat, 22 Jun 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</guid><description>What do the terms “CPU bound” and “I/O bound” mean? 处理器更优先于调度I/O消耗型进程？ cpu中断 系统服务（这里不局限于golang写的后台</description></item><item><title>Linux的socket相关函数调用时系统做了什么</title><link>http://zput.github.io/post/_posts/close_shutdown/</link><pubDate>Fri, 21 Jun 2019 16:30:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/close_shutdown/</guid><description>accept write supplement 1. MSS与TCP的分片 2. 发送方法返回成功后，数据一定发送到了TCP的另一端吗？ 3、Nagle算法、滑动窗口、拥塞窗口对发送方法的影响 （</description></item><item><title>线程死锁</title><link>http://zput.github.io/post/_posts/lock/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/lock/</guid><description>线程死锁 线程死锁 什么是线程死锁，如何解决 产生死锁的条件有四个： 互斥条件：所谓互斥就是进程在某一时间内独占资源。 请求与保持条件：一个进程因请求</description></item><item><title>异步与同步</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</guid><description>同步和异步他们的关注点的是消息通信机制 (synchronous communication/ asynchronous communication): 同步，就是调用某个东西时候，调用方得等待这个调用返回结果才能继续往后执行。 异步，和同步相反调用</description></item><item><title>编译原理-从下到上解析</title><link>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</link><pubDate>Tue, 26 Mar 2019 08:47:11 +0100</pubDate><guid>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</guid><description>LR(0) 附录 形态和状态 形态 起始形态 已完成形态(可折叠形态[不是可折叠状态]) 形态的转移 延伸形态 形态集合 形态集合的闭合 状态 起始状态(记为I0) 形态集</description></item></channel></rss>