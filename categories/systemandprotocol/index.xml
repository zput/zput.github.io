<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>systemAndProtocol on Zput's blog</title><link>http://zput.github.io/categories/systemandprotocol/</link><description>Recent content in systemAndProtocol on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 19 Jan 2023 19:00:00 +0000</lastBuildDate><atom:link href="http://zput.github.io/categories/systemandprotocol/index.xml" rel="self" type="application/rss+xml"/><item><title>面向对象编程在不同语言中落地</title><link>http://zput.github.io/post/_posts/object_oriented/</link><pubDate>Thu, 19 Jan 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/object_oriented/</guid><description>面向对象比较 我们将从封装，继承，多态这三个面向对象编程核心特点来展开。 封装 访问控制 C++ &amp;amp; PHP 我们可以根据访问权限总结出不同的访问类型，如下所示：</description></item><item><title>源码-反码-补码</title><link>http://zput.github.io/post/_posts/complement-source-reverse/</link><pubDate>Tue, 10 Jan 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/complement-source-reverse/</guid><description>概念 机器数 真值 真值符号部分 真值部分 举例： -1的真值是:1000 0001, 其中真值符号区域为最高位的1,他的真值区域为000 0001。 原码 1 2 [+1] = 0000 0001</description></item><item><title>PHP基本语法</title><link>http://zput.github.io/post/_posts/php/</link><pubDate>Mon, 09 Jan 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/php/</guid><description>常用的函数 String（字符串） &amp;ldquo;&amp;quot;:空字符串 &amp;ldquo;0&amp;rdquo;:作为字符串的0 Integer（整型） 0:</description></item><item><title>数据结构与数据类型</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/data_type_and_data_struct/</link><pubDate>Tue, 13 Dec 2022 22:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/data_type_and_data_struct/</guid><description>把名词分开来联想 数据结构 什么是结构 结构是指在一个系统或者材料之中，互相关联的元素的排列、组织。结构按类别可分为等级结构（有层次的一对多）、网</description></item><item><title>调用关系</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</link><pubDate>Tue, 13 Dec 2022 20:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</guid><description>单位 以函数为单位:《请求与响应》 请求与响应参数的判断 默认响应里面如果错误为nil,那么它的实际值的字段不能是nil吧，最好是初始化为对应的空</description></item><item><title>进程间通讯</title><link>http://zput.github.io/post/_posts/process_communication/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/process_communication/</guid><description>including IPC的方式通常有 管道（包括无名管道和命名管道）:PIPE 信号量: 消息队列: 信号量 共享存储: mmap() shm Socket &amp;mdash; Streams: ##including 管道中的无名管道是存放在文件描述符</description></item><item><title>谈谈线程</title><link>http://zput.github.io/post/_posts/thread/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/thread/</guid><description>什么是进程？ 从概念上来说：进程是计算机顺序执行的程序的过程，它是系统资源分配的最小单位。从我个人理解来说它类似于一个容器，里面有很多的资源（</description></item><item><title>程序需要考虑的资源消耗问题</title><link>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</link><pubDate>Sat, 22 Jun 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</guid><description>What do the terms “CPU bound” and “I/O bound” mean? 处理器更优先于调度I/O消耗型进程？ cpu中断 系统服务（这里不局限于golang写的后台</description></item><item><title>Linux的socket相关函数调用时系统做了什么</title><link>http://zput.github.io/post/_posts/close_shutdown/</link><pubDate>Fri, 21 Jun 2019 16:30:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/close_shutdown/</guid><description>accept write 我们已经建立好的TCP连接，对应着操作系统分配的1个套接字。操作TCP协议发送数据时，面对的是数据流。通常调用诸如send或者write</description></item><item><title>线程死锁</title><link>http://zput.github.io/post/_posts/lock/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/lock/</guid><description>线程死锁 什么是线程死锁，如何解决 产生死锁的条件有四个： 互斥条件：所谓互斥就是进程在某一时间内独占资源。 请求与保持条件：一个进程因请求资源而阻</description></item><item><title>异步与同步</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</guid><description>同步和异步他们的关注点的是消息通信机制 (synchronous communication/ asynchronous communication): 同步，就是调用某个东西时候，调用方得等待这个调用返回结果才能继续往后执行。 异步，和同步相反调用</description></item><item><title>编译原理-从下到上解析</title><link>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</link><pubDate>Tue, 26 Mar 2019 08:47:11 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</guid><description>LR(0) 附录 形态和状态 形态 起始形态 已完成形态(可折叠形态[不是可折叠状态]) 形态的转移 延伸形态 形态集合 形态集合的闭合 状态 起始状态(记为I0) 形态集</description></item></channel></rss>