<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zput's blog</title><link>http://zput.github.io/post/</link><description>Recent content in Posts on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 02 Nov 2023 19:00:00 +0000</lastBuildDate><atom:link href="http://zput.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>特征降维</title><link>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%89%B9%E5%BE%81%E9%99%8D%E7%BB%B4/</link><pubDate>Thu, 02 Nov 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%89%B9%E5%BE%81%E9%99%8D%E7%BB%B4/</guid><description>降维是指在某些限定条件下，降低随机变量（特征）个数，得到一组“不相关”主变量的过程。 降低随机变量的个数 正是因为在进行训练的时候，我们都是使用</description></item><item><title>特征提取之字典提取与文本提取</title><link>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/tfidf/</link><pubDate>Thu, 02 Nov 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/tfidf/</guid><description>字典特征提取 将类别中的特征进行one-hot编码处理。 key value 类别 one-hot编码 独热编码(one-hot) one-hot编码用于将离散的分类</description></item><item><title>特征预处理</title><link>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/machine_study/</link><pubDate>Thu, 02 Nov 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/machine_study/</guid><description>为什么要进行归一化/标准化？ 特征的单位或者大小相差较大，或者某特征的方差相比其他的特征要大出几个数量级，容易影响（支配）目标结果，使得一些算</description></item><item><title>面向对象编程在不同语言中落地</title><link>http://zput.github.io/post/_posts/object_oriented/</link><pubDate>Thu, 19 Jan 2023 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/object_oriented/</guid><description>面向对象比较 我们将从封装，继承，多态这三个面向对象编程核心特点来展开。 封装 访问控制 C++ &amp;amp; PHP 我们可以根据访问权限总结出不同的访问类型，如下所示：</description></item><item><title>调用关系</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</link><pubDate>Tue, 13 Dec 2022 20:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/invocation_relation/</guid><description>单位 以函数为单位:《请求与响应》 请求与响应参数的判断 默认响应里面如果错误为nil,那么它的实际值的字段不能是nil吧，最好是初始化为对应的空</description></item><item><title>编程范式-泛型编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/swap-search-sum/</link><pubDate>Thu, 20 Oct 2022 21:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/swap-search-sum/</guid><description>泛型 要说泛型，就需要了解类型的本质。 类型 编程语言会有两种类型，一种是内建类型，如 int、float 和 char 等，一种是抽象类型，如 struct、c</description></item><item><title>利用阿里云进行转码</title><link>http://zput.github.io/post/_posts/work/aliyun_transcode_video/</link><pubDate>Mon, 16 Aug 2021 12:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/work/aliyun_transcode_video/</guid><description>整个流程 阿里云控制台配置 开发 注意点 扩展知识 整个流程 阿里云控制台配置 开通视频点播功能 创建RAM用户（支持控制台访问，编程访问） 创建模版组 添加加</description></item><item><title>访问者模式</title><link>http://zput.github.io/post/_posts/%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 24 Nov 2020 15:03:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>什么是访问者模式 访问者模式 来看一个golang语言的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42</description></item><item><title>编程范式</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</guid><description>编程范式 Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms. ——From Wikipedia 编程范型、编程范式或程序设计法，是指软件工程中的一类典型的编程风格。 编程范型提</description></item><item><title>编程范式-函数编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid><description>函数编程 仅当一个函数将一个或多个函数作为参数或作为结果返回另一个函数时，才可以将其视为高阶函数。 正宗的函数编程的概念是什么？ stateles</description></item><item><title>编程范式-面向对象编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid><description>面向对象编程 the underlying logic 这本书的 23 个经典的设计模式，基本上就是说了两个面向对象的核心理念： &amp;ldquo;Program to an ‘interface’, not an ‘implementa</description></item><item><title>conclusion_gitlab_ci_cd</title><link>http://zput.github.io/post/_posts/tool/gitlab/conclusion_gitlab_ci_cd/</link><pubDate>Tue, 25 Feb 2020 21:06:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/gitlab/conclusion_gitlab_ci_cd/</guid><description>大纲 gitlab pipeline gitlab&amp;rsquo;s pipeline一体两面 pipeline定义在项目的 .gitlab-ci.yml里, 由stages串联组成。（每个stages里面</description></item><item><title>postgres高级总结</title><link>http://zput.github.io/post/_posts/tool/postgre/</link><pubDate>Fri, 24 Jan 2020 10:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/postgre/</guid><description>函数 针对postgresql的创建函数脚本 返回表中数据的函数 循环更新表中的数据_也可以多条返回数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description></item><item><title>the_process_structure_ci_cd_base_on_gitlab</title><link>http://zput.github.io/post/_posts/tool/gitlab/the_process_structure_ci_cd_base_on_gitlab/</link><pubDate>Wed, 22 Jan 2020 20:09:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/gitlab/the_process_structure_ci_cd_base_on_gitlab/</guid><description>docker/docker-compose主题 https://docs.docker.com/engine/install/centos/ https://docs.docker.com/compose/install/ !!!直接使用docker的官方文档做法就行了。 gitlab主题 DevOps(CI/CD) Container(Docker) Kubernetes Service Mesh why:为什么要</description></item><item><title>telepresence一些使用方法</title><link>http://zput.github.io/post/_posts/kubernets/telepresence/</link><pubDate>Sun, 20 Oct 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/kubernets/telepresence/</guid><description>1 2 3 4 5 kubectl run service-b --image=datawire/hello-world --port=8000 --expose kubectl get service service-b NAME CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice-b 10.0.0.12 &amp;lt;none&amp;gt; 8000/TCP 1m https://cloud.tencent.com/developer/article/1537743 自从用上 Telepresence 后，本地调试 Kubernetes 中的微服务不再是梦！ https://cloud.tencent.com/developer/article/1537743 https://www.telepresence.io/discussion/how-it-works https://sshuttle.readthedocs.io/en/stable/usage.html#usage-notes https://github.com/datawire/sshuttle k8s自定义controller三部曲</description></item><item><title>进程间通讯</title><link>http://zput.github.io/post/_posts/process_communication/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/process_communication/</guid><description>including IPC的方式通常有 管道（包括无名管道和命名管道）:PIPE 信号量: 消息队列: 信号量 共享存储: mmap() shm Socket &amp;mdash; Streams: ##including 管道中的无名管道是存放在文件描述符</description></item><item><title>谈谈线程</title><link>http://zput.github.io/post/_posts/thread/</link><pubDate>Thu, 04 Jul 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/thread/</guid><description>什么是进程？ 从概念上来说：进程是计算机顺序执行的程序的过程，它是系统资源分配的最小单位。从我个人理解来说它类似于一个容器，里面有很多的资源（</description></item><item><title>程序需要考虑的资源消耗问题</title><link>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</link><pubDate>Sat, 22 Jun 2019 19:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%B6%88%E8%80%97/</guid><description>What do the terms “CPU bound” and “I/O bound” mean? 处理器更优先于调度I/O消耗型进程？ cpu中断 系统服务（这里不局限于golang写的后台</description></item><item><title>Linux的socket相关函数调用时系统做了什么</title><link>http://zput.github.io/post/_posts/close_shutdown/</link><pubDate>Fri, 21 Jun 2019 16:30:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/close_shutdown/</guid><description>accept write supplement 1. MSS与TCP的分片 2. 发送方法返回成功后，数据一定发送到了TCP的另一端吗？ 3、Nagle算法、滑动窗口、拥塞窗口对发送方法的影响 （</description></item><item><title>线程死锁</title><link>http://zput.github.io/post/_posts/lock/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/lock/</guid><description>线程死锁 线程死锁 什么是线程死锁，如何解决 产生死锁的条件有四个： 互斥条件：所谓互斥就是进程在某一时间内独占资源。 请求与保持条件：一个进程因请求</description></item><item><title>异步与同步</title><link>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</link><pubDate>Fri, 21 Jun 2019 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A6%82%E5%BF%B5%E5%8E%9F%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83/synchronous_asynchronous/</guid><description>同步和异步他们的关注点的是消息通信机制 (synchronous communication/ asynchronous communication): 同步，就是调用某个东西时候，调用方得等待这个调用返回结果才能继续往后执行。 异步，和同步相反调用</description></item><item><title>编译原理-从下到上解析</title><link>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</link><pubDate>Tue, 26 Mar 2019 08:47:11 +0100</pubDate><guid>http://zput.github.io/post/_posts/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8Aparse/</guid><description>LR(0) 附录 形态和状态 形态 起始形态 已完成形态(可折叠形态[不是可折叠状态]) 形态的转移 延伸形态 形态集合 形态集合的闭合 状态 起始状态(记为I0) 形态集</description></item><item><title>Https = http + ssl</title><link>http://zput.github.io/post/_posts/tool/https/</link><pubDate>Thu, 24 May 2018 12:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/https/</guid><description>任意一个三位数乘以1001，乘积的末尾三位一定等于它本身 234*1001=234234 120*1001=120120 123*1001=123123 123这个数，乘以91得到了11193，接着我去掉两位只保留后三位，把193 123*91%1000</description></item><item><title>大话跨域</title><link>http://zput.github.io/post/_posts/tool/cros/</link><pubDate>Thu, 24 May 2018 12:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/cros/</guid><description>cros what:什么是跨域？ 我有一个域名a.com和一个域名b.com 我在a.com上有一个接口a.com/api，会返回一些数据 我想在b.co</description></item><item><title>迁移本地环境需要用到的</title><link>http://zput.github.io/post/_posts/tool/%E8%BF%81%E7%A7%BB%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84/</link><pubDate>Thu, 24 May 2018 12:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/%E8%BF%81%E7%A7%BB%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84/</guid><description>首先解决网络问题: download ShadowsocksR for MAC: 这个软件，添加配置了以后，先不要连，需要先更新订阅然后再去连接 vpn/httpproxy ➜ code cat ~/.bashrc 1 2 3 4 5 6 7 #export http_proxy=http://127.0.0.1:1087 #export https_proxy=http://127.0.0.1:1087 export http_proxy=&amp;#34;&amp;#34; export https_proxy=&amp;#34;&amp;#34; #export HTTP_PROXY=&amp;#34;&amp;#34; #export HTTPS_PROXY=&amp;#34;&amp;#34; 软件</description></item><item><title>effective habit</title><link>http://zput.github.io/post/_posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/effective_habit/</link><pubDate>Sun, 20 May 2018 16:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/effective_habit/</guid><description>smart法则 目标的价值是什么？如何制定清晰的目标计划？ - 李雨晴的回答 - 知乎 eg: 具体的specific: 找到一份大厂工作。 可衡量的measur</description></item><item><title>多路复用一点理解</title><link>http://zput.github.io/post/_posts/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link><pubDate>Sun, 20 May 2018 16:33:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid><description>why, 为什么需要多路复用? 为什么要多路复用？，为什么引出多路复用。 对socket的I/O操作&amp;ndash;》read，从I/O中得到数据， wri</description></item><item><title>高性能服务器</title><link>http://zput.github.io/post/_posts/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%AB%98%E6%80%A7%E8%83%BD/</link><pubDate>Wed, 28 Feb 2018 15:03:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%AB%98%E6%80%A7%E8%83%BD/</guid><description>基于通用组件编程 一些注意点 当mainLoop accept一个连接进来，怎么把这个连接放入其他的subLoop中的？ 永远不能让你业务逻辑（一般</description></item><item><title>建立个人仓库</title><link>http://zput.github.io/post/_posts/tool/hexo_and_maupassant/</link><pubDate>Wed, 24 May 2017 12:03:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/tool/hexo_and_maupassant/</guid><description>hexo仓库 build.sh 1 2 3 4 5 6 7 #!/bin/bash npm install git submodule init git submodule update # https://www.haomwei.com/technology/maupassant-hexo.html npm install hexo-renderer-pug --save npm install hexo-renderer-sass --save #the great word 其中hexo仓库可以加上你需要的主题仓库 git submodule add https://github.com/tufu9441/maupassant-hexo.git themes/maupassant source仓库 makefile</description></item><item><title>简单实操elk</title><link>http://zput.github.io/post/_posts/efk/</link><pubDate>Sat, 26 Mar 2016 08:47:11 +0100</pubDate><guid>http://zput.github.io/post/_posts/efk/</guid><description>download repository 1 curl -LOk https://github.com/kzk/docker-compose-efk/archive/master.zip download docker elasticsearch and kibana 1 2 3 4 docker pull docker.elastic.co/elasticsearch/elasticsearch:7.2.0 docker run -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&amp;#34;-Xms256m -Xmx256m&amp;#34; -e &amp;#34;discovery.type=single-node&amp;#34; docker.elastic.co/elasticsearch/elasticsearch:7.2.0 1 2 3 4 5 6 7 docker pull docker.elastic.co/kibana/kibana:7.2.0 docker run --link vigilant_villani:elasticsearch -p 5601:5601 {docker-repo}:{version} docker run --link vigilant_villani:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.2.0 docker run --link goofy_pasteur:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.2.0 docker&amp;rsquo;s contain rename it &amp;mdash;&amp;gt; docker run &amp;ndash;name docker</description></item><item><title/><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/uml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/uml/</guid><description>关联关系 组合关系中，部分的实例化在整体中进行。聚合关系中，部分的实例化过程在整体外进行，然后通过某种方式注入给整体。 另一种表现可能是，组合是</description></item></channel></rss>