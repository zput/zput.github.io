<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Zput's blog</title><link>http://zput.github.io/tags/golang/</link><description>Recent content in golang on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 24 Nov 2020 15:03:00 +0000</lastBuildDate><atom:link href="http://zput.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>内存大小端</title><link>http://zput.github.io/post/_posts/memory/</link><pubDate>Sun, 20 Jan 2019 09:03:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/memory/</guid><description>内存大小端 对于这两种存储方式，如果联系下我们常用 “异或” 操作，就能得到一个很好的记忆规则。总结来说就是： 低地址存储低字节即为小端存储；高地址</description></item><item><title>访问者模式</title><link>http://zput.github.io/post/_posts/%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 24 Nov 2020 15:03:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>什么是访问者模式 访问者模式 来看一个golang语言的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42</description></item></channel></rss>