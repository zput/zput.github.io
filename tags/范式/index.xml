<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>范式 on Zput's blog</title><link>http://zput.github.io/tags/%E8%8C%83%E5%BC%8F/</link><description>Recent content in 范式 on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 20 Oct 2022 21:00:00 +0000</lastBuildDate><atom:link href="http://zput.github.io/tags/%E8%8C%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>编程范式-泛型编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/swap-search-sum/</link><pubDate>Thu, 20 Oct 2022 21:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/swap-search-sum/</guid><description>泛型 要说泛型，就需要了解类型的本质。 类型 编程语言会有两种类型，一种是内建类型，如 int、float 和 char 等，一种是抽象类型，如 struct、c</description></item><item><title>编程范式</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</guid><description>编程范式 Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms. ——From Wikipedia 编程范型、编程范式或程序设计法，是指软件工程中的一类典型的编程风格。 编程范型提</description></item><item><title>编程范式-函数编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid><description>函数编程 仅当一个函数将一个或多个函数作为参数或作为结果返回另一个函数时，才可以将其视为高阶函数。 正宗的函数编程的概念是什么？ stateles</description></item><item><title>编程范式-面向对象编程</title><link>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://zput.github.io/post/_posts/%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid><description>面向对象编程 the underlying logic 这本书的 23 个经典的设计模式，基本上就是说了两个面向对象的核心理念： &amp;ldquo;Program to an ‘interface’, not an ‘implementa</description></item></channel></rss>