<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>范式 on Zput's blog</title><link>http://localhost:1313/tags/%E8%8C%83%E5%BC%8F/</link><description>Recent content in 范式 on Zput's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 20 Oct 2020 15:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%E8%8C%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>三种编程范式</title><link>http://localhost:1313/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</link><pubDate>Tue, 20 Oct 2020 15:00:00 +0000</pubDate><guid>http://localhost:1313/post/_posts/%E8%8C%83%E5%BC%8F/%E8%8C%83%E5%BC%8F/</guid><description>从编程范式入手 对于golang来说就是 泛型编程 golang interface{}&amp;ndash;&amp;gt;interface{}/type XXX interface{YYY} reflect 函数编程 golang 仅当一个函数将一个或多个函数作为参数或作为结果返回另一个函数时，才可以将其</description></item></channel></rss>